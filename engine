        class RickRoll{
			constructor(src,muted,speed,x,y){
                this.x = x;
                this.y = y;
				this.src = src
                this.muted = muted;
                this.speed = speed;
			}
			run() {
				let newWin = window.open("rickroll.html", "You've been rickrolled.", `resizable=0,width=${this.x},height=${this.y}`);
                this.popup = newWin;
                this.create();
			}
			create(){
                let info2pass = document.createElement("div");
                info2pass.id = "theVideo";
                document.body.append(info2pass)
                info2pass.setAttribute("muted",this.muted);
                info2pass.setAttribute("speed",this.speed);
                info2pass.style.display = "none";
                info2pass.textContent = this.src;
                let closed = setInterval(_=>{
                    if(this.popup.closed){
                        info2pass.remove();
                        clearInterval(closed)
                    }
                },100)
                    setTimeout(_=>{
                        let rickrolled = document.createElement("div");
                        rickrolled.innerHTML = "RickRolled. <br> Hahahaha <br>(fet per Albert)";
                        rickrolled.style = "opacity: 0;";
                        document.body.appendChild(rickrolled);
                        rickrolled.classList.add("rickrolled");
                    },5000);
			}

            close() {
                this.popup.close()

                return true;
            }
		}
        class Choose {
            constructor(randomE,...funs) {
                this.randomE = randomE;
                this.funs = new Array(...funs)
                let chosen = this.funs[this.random(this.funs.length)];
                this.prototype = Object.create(Object.getPrototypeOf(chosen));
                let keys = Object.keys(chosen);
                for (let i = 0; i < keys.length; i++) {
                    this[keys[i]] = chosen[keys[i]]
                }
                this.getMethods(chosen)
            }
            getMethods = (obj) => {    
                return (_=>{
                    let properties = new Set()
                    let currentObj = obj
                    do {
                        Object.getOwnPropertyNames(currentObj).map(item => properties.add(item))
                    } while ((currentObj = Object.getPrototypeOf(currentObj)))
                    let amethods = [...properties.keys()].filter(item => typeof obj[item] === 'function');
                    for(let i = 0; i < amethods.length; i++) {
                        if(amethods[i].valueOf().includes("_")) break;
                        //this[amethods[i].valueOf()] = "";
                        if(i>0) {
                            let method = Object.getPrototypeOf(obj)[amethods[i]];
                            let methodName = method.name;
                            this[methodName] = method;
                        }
                    }
                    return true
                })()
            }

            random (max) {
                if (typeof(Storage) !== "undefined" && !this.randomE) {
                    let count;
                    if (localStorage.getItem("count")){
                        count = parseInt(localStorage.getItem("count"));
                        let countp = count == (max -1)? "0" : count+1;
                        localStorage.setItem("count",countp);
                        count = parseInt(localStorage.getItem("count"));
                    }else{
                        localStorage.setItem("count","0")
                        count = 0;
                    }
                    console.log(count)
                    return count
                } else {
                    return Math.floor(Math.random() * max);
                }
            }


        }